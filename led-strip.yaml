############################
#MP34DT01  # 	ESP32        #
#3V	       #  3V           #
#GND	     #  GND (GPIO22) #
#SEL	     #  GND or 3.3V  #(GPIO23)
#CLK	     #  WS (GPIO19)  #
#DAT	     #  IN (GPIO33)  #
#          # -	BCK        #
############################

substitutions:
  devicename: led-strip
  upper_devicename: led-strip
  device_description: Гирлянда беседка
  
esphome:
  name: ${devicename}
  comment: "${device_description}"
  includes:
    - my_components/ledstrip/led/music_leds_esphome.h
    - my_components/ledstrip/led/FFT.h
    - my_components/ledstrip/led/ExpFilter.h
    - my_components/ledstrip/led/VisualEffect.h
    - my_components/ledstrip/led/gaussian_filter1d.h

esp32:
  board: m5stack-atom
  framework:
    type: arduino

external_components:
  - source:
      type: git
      url: https://github.com/KaufHA/common
    components: [ ddp ]

#logger:

api:
  password: !secret api_pass

ota:
  password: !secret ota_pass
  platform: esphome
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

e131:
  method: multicast
wled:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${devicename} IP Address"
      icon: mdi:ip
    ssid:
      name: "${devicename} SSID"
      icon: mdi:access-point-network
    mac_address:
      name: "${devicename} Mac"
      icon: mdi:lan
  
sensor:
  - platform: wifi_signal
    name: ${devicename} Wifi
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: ${devicename} WiFi Percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

binary_sensor:
  - platform: gpio
    name: "Led"
    pin:
      number: GPIO39
      inverted: true
 #   on_click:
 #       - light.toggle: LedsStrip
    on_click:
      then:
        - lambda: !<!lambda> |-
            uint32_t total = id(LedsStrip)->get_effects().size();
            uint32_t curr_idx = 0;
            uint32_t i = 0;
            std::string curr_effect = id(LedsStrip)->get_effect_name();
            auto call = id(LedsStrip)->turn_on();

            // set first effect in list
            if (strcasecmp(curr_effect.c_str(), "none") == 0) {
              call.set_effect(1);
              call.perform();

              return;
            }

            for (auto *effect : id(LedsStrip)->get_effects()) {
              i++;
              if (strcasecmp(effect->get_name().c_str(), curr_effect.c_str()) == 0)
                curr_idx = i;
            }

            if (curr_idx == total) {
              call.set_effect(0);
            } else {
              call.set_effect(curr_idx + 1);
            }

            call.perform();
button:
  - platform: restart
    name: "${devicename} restart"

switch:
  - platform: gpio
    pin:
      number: GPIO22
      drive_strength: 40mA
      inverted: true
 #   name: MIC 
 # internal (Optional, boolean): Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an id without a name will implicitly set this to true.
    id: mic
    icon: mdi:microphone
    restore_mode: ALWAYS_ON

  - platform: gpio
    pin:
      number: GPIO23
      inverted: true
    #name: select L_R 
    #internal (Optional, boolean): Mark this component as internal. Internal components will not be exposed to the frontend (like Home Assistant). Only specifying an id without a name will implicitly set this to true.
    id: selec_L_R
    icon: mdi:microphone
    restore_mode: ALWAYS_ON
#Please note that the WS is connected to the CLK of the microphone! You can select if you receive only data on the left or right by setting SEL to high or low.
ddp:

light:
  - platform: fastled_clockless
    id: LedsStrip
    chipset: WS2812 #SK6812
    pin: GPIO26 #26,32 разьем #27 встроеный LED
    num_leds: 50
    rgb_order: RGB
    name: "MUSIC LEDS"
    effects:
#random     
      - random:
      # Customize parameters
      - random:
          name: "Slow Random Colors"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Fast Random Colors"
          transition_length: 4s
          update_interval: 5s
      - random:          
          name: "Slow Random Effect"
          transition_length: 20s
          update_interval: 20s
      - random:
          name: "Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - random:
          name: "Insane Random Effect"
          transition_length: 1s
          update_interval: 1s
      - random:          
          name: "Totally Loco Random Effect"
          transition_length: 300ms
          update_interval: 250ms

#pulse
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s

#strobe
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - strobe:
          name: Lightning2
          colors:
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 160ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 3000ms
      - strobe:
          name: Strobe Effect
          colors:
            - state: True
              red: 100%
              green: 90%
              blue: 0%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              white: 0%
              duration: 50ms     

#flicker        
      - flicker:
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%

      - lambda:
          name: My Custom Effect
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(LedsStrip).turn_on();
            // Transition of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;

# addressable_rainbow
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50

#addressable_color_wipe
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
        #  gradient: false

#addressable_scan
      - addressable_scan:
      - addressable_scan:
          name: Scan Effect With Custom Values
          move_interval: 100ms
          scan_width: 1

#addressable_twinkle
      - addressable_twinkle:
      - addressable_twinkle:
          name: Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 4ms

#addressable_random_twinkle
      - addressable_random_twinkle:
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 32ms

#addressable_fireworks
      - addressable_fireworks:
      - addressable_fireworks:
          name: Fireworks Effect With Custom Values
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120

#addressable_flicker
      - addressable_flicker:
      - addressable_flicker:
          name: Flicker Effect With Custom Values1
          update_interval: 16ms
          intensity: 5%

#automation
      - automation:
          name: Custom Automation Effect3
          sequence:
          - light.addressable_set:
              id: LedsStrip
              red: 100%
              green: 100%
              blue: 100%
          - delay: 100ms
          - light.addressable_set:
              id: LedsStrip
              range_from: 0
              range_to: 20
              red: 100%
              green: 0%
              blue: 0%


#!include        
      - !include my_components/ledstrip/effects/2.yaml    
      - !include my_components/ledstrip/effects/InAlarm.yaml
      - !include my_components/ledstrip/effects/WTF.yaml
      - !include my_components/ledstrip/effects/aurora.yaml
      - !include my_components/ledstrip/effects/blue_scan.yaml
      - !include my_components/ledstrip/effects/bluez.yaml
      - !include my_components/ledstrip/effects/breathing.yaml
      - !include my_components/ledstrip/effects/breathing2.yaml
      - !include my_components/ledstrip/effects/breathing_rgb.yaml
      - !include my_components/ledstrip/effects/breathing_red.yaml
      - !include my_components/ledstrip/effects/candles.yaml
      - !include my_components/ledstrip/effects/candy_cane.yaml
      - !include my_components/ledstrip/effects/chill_mode.yaml
      - !include my_components/ledstrip/effects/chill_vibrant.yaml
      - !include my_components/ledstrip/effects/christmas.yaml
      - !include my_components/ledstrip/effects/christmas_fading.yaml
      - !include my_components/ledstrip/effects/christmas_fadingN.yaml
      - !include my_components/ledstrip/effects/christmas_multicolour.yaml
      - !include my_components/ledstrip/effects/christmas_red_green_white.yaml
      - !include my_components/ledstrip/effects/christmas_static.yaml
      - !include my_components/ledstrip/effects/color_change.yaml
      - !include my_components/ledstrip/effects/color_loop.yaml
      - !include my_components/ledstrip/effects/disco.yaml
      - !include my_components/ledstrip/effects/expo.yaml
      - !include my_components/ledstrip/effects/fire.yaml
      - !include my_components/ledstrip/effects/fireplace.yaml
      - !include my_components/ledstrip/effects/flag_russian.yaml
      - !include my_components/ledstrip/effects/flag_ Italy.yaml
      - !include my_components/ledstrip/effects/flames.yaml
      - !include my_components/ledstrip/effects/gold_glitter.yaml
      - !include my_components/ledstrip/effects/lightning.yaml
      - !include my_components/ledstrip/effects/patern.yaml
      - !include my_components/ledstrip/effects/pattern20.yaml
      - !include my_components/ledstrip/effects/pattern25.yaml
      - !include my_components/ledstrip/effects/pattern33.yaml
      - !include my_components/ledstrip/effects/pattern50.yaml
      - !include my_components/ledstrip/effects/pattern50_2.yaml
      - !include my_components/ledstrip/effects/pattern50_3.yaml
      - !include my_components/ledstrip/effects/pattern75.yaml  
      - !include my_components/ledstrip/effects/police_scroll.yaml
      - !include my_components/ledstrip/effects/rainbow_row.yaml
      - !include my_components/ledstrip/effects/random_shift.yaml
      - !include my_components/ledstrip/effects/random_flicker.yaml
      - !include my_components/ledstrip/effects/snowflack.yaml
      - !include my_components/ledstrip/effects/static_rainbow.yaml
      - !include my_components/ledstrip/effects/sunrise.yaml
      - !include my_components/ledstrip/effects/vesuvius.yaml
      - !include my_components/ledstrip/effects/wheel_of_color.yaml
      - !include my_components/ledstrip/effects/wipe_in.yaml
      - !include my_components/ledstrip/effects/wipe_out.yaml

#addressable_lambda
      - addressable_lambda:
          name: "Effect1"
          update_interval: 16ms
          lambda: |-

            // Example: Simple color wipe
            for (int i = it.size() - 1; i > 0; i--) {
              it[i] = it[i - 1].get();
            }
            it[0] = Color::random_color();

            // Bonus: use .range() and .all() to set many LEDs without having to write a loop.
            it.range(0, 50) = Color::BLACK;
            it.all().fade_to_black(10);
      - addressable_lambda:
          name: "Effect2"
          update_interval: 16ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again
            static uint16_t progress = 0;

            // normal variables lose their value after each
            // execution - basically after each update_interval
            uint16_t changes = 0;

            // To reset static when stopping and starting the effect
            // again you can use the initial_run variables
            if (initial_run) {
              progress = 0;
              it.all() = Color::BLACK;
              // optionally do a return so nothing happens until the next update_interval
              return;
            }

#addressable_lambda Music
      - addressable_lambda:
          name: Scroll with Music
          update_interval: 0s
          lambda: |-
            music_leds.ShowFrame(MODE_SCROLL, &it);
      - addressable_lambda:
          name: Energy with Music
          update_interval: 0s
          lambda: |-
            music_leds.ShowFrame(MODE_ENERGY, &it);
      - addressable_lambda:
          name: Spectrum with Music
          update_interval: 0s
          lambda: |-
            music_leds.ShowFrame(MODE_SPECTRUM, &it);


      - wled:
          # port: 21324
          # blank_on_start: True
          # sync_group_mask: 0
      - e131:
          universe: 1
          channels: RGB
      - ddp:
          name: DDP
          timeout: 10s
          disable_gamma: true
          brightness_scaling: none

      - addressable_ddp:
          name: Addressable DDP
          timeout: 10s
          disable_gamma: true
          brightness_scaling: none
          
web_server:
  port: 80
  version: 3
  auth:
    username: !secret web_user
    password: !secret web_pass  
